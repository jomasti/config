if has('vim_starting') | set encoding=utf-8 nobomb | endif
scriptencoding utf-8

" ----------------------------------------------------------------------------
" Clipboard
" ----------------------------------------------------------------------------

set pastetoggle=<F3>

vmap <Leader>y "+y
vmap <Leader>d "+d
nmap <Leader>p "+p
nmap <Leader>P "+P
vmap <Leader>p "+p
vmap <Leader>P "+P

" ----------------------------------------------------------------------------
" Display
" ----------------------------------------------------------------------------

set number
set cursorline
set laststatus=2
set cmdheight=1
set noshowmode
set ruler

set scrolloff=8
set sidescrolloff=16

set synmaxcol=512

" ----------------------------------------------------------------------------
" Input
" ----------------------------------------------------------------------------

set mouse=
let g:mapleader = "\<Space>"

" ----------------------------------------------------------------------------
" Indent
" ----------------------------------------------------------------------------

set autoindent
set nocindent

" ----------------------------------------------------------------------------
" Splits and buffers
" ----------------------------------------------------------------------------

" split traversal
nnoremap <C-J> <C-W><C-J>
nnoremap <C-K> <C-W><C-K>
nnoremap <C-L> <C-W><C-L>
nnoremap <C-H> <C-W><C-H>

" split defaults
set splitbelow
set splitright

set switchbuf=useopen

set nostartofline

" ----------------------------------------------------------------------------
" Tabs
" ----------------------------------------------------------------------------

set expandtab
set shiftwidth=2
set softtabstop=2
set backspace=indent,eol,start

" ----------------------------------------------------------------------------
" Search
" ----------------------------------------------------------------------------

set ignorecase
set smartcase
set incsearch

" ----------------------------------------------------------------------------
" Swap
" ----------------------------------------------------------------------------

set swapfile
execute 'set directory=' . g:jms#vim_dir . '/.tmp/swap//'

" ----------------------------------------------------------------------------
" Backups
" ----------------------------------------------------------------------------

execute 'set backupdir=' . g:jms#vim_dir . '/.tmp/backup//'
set writebackup
set nobackup
set backupcopy=yes
set backupskip+=/tmp/*,/private/tmp/*

set undofile
set undolevels=1000
set undoreload=10000
execute 'set undodir=' . g:jms#vim_dir . '/.tmp/undo//'

" ----------------------------------------------------------------------------
" Wild and file globbing stuff in command mode
" ----------------------------------------------------------------------------

set browsedir=buffer                  " browse files in same dir as open file
set wildmenu                          " Enhanced command line completion.
set wildmode=list:longest,full        " Complete files using a menu AND list

if v:version >= 704
  set wildignorecase
endif

" Binary
set wildignore+=*.aux,*.out,*.toc
set wildignore+=*.o,*.obj,*.exe,*.dll,*.manifest,*.rbc,*.class
set wildignore+=*.ai,*.bmp,*.gif,*.ico,*.jpg,*.jpeg,*.png,*.psd,*.webp
set wildignore+=*.avi,*.m4a,*.mp3,*.mp4,*.oga,*.ogg,*.wav,*.webm,*.wmv
set wildignore+=*.eot,*.otf,*.ttf,*.woff
set wildignore+=*.doc,*.pdf
set wildignore+=*.zip,*.tar.gz,*.tar.bz2,*.rar,*.tar.xz
" Cache
set wildignore+=*/vendor/gems/*,*/vendor/cache/*,*/.bundle/*,*/.sass-cache/*,*.gem
" Compiled
set wildignore+=*.min.*,*-min.*
set wildignore+=*.pyc
" Temp/system
set wildignore+=*.swp,.lock,.DS_Store,._*

" ----------------------------------------------------------------------------
" Input auto-formatting (global defaults)
" ----------------------------------------------------------------------------

set formatoptions=
set formatoptions+=c                  " Auto-wrap comments using textwidth
set formatoptions+=r                  " Continue comments by default
set formatoptions-=o                  " do not continue comment using o or O
set formatoptions+=q                  " continue comments with gq
set formatoptions-=a                  " auto-gq on type in comments?
set formatoptions+=n                  " Recognize numbered lists
set formatoptions+=2                  " Use indent from 2nd line of a paragraph
set formatoptions-=l                  " break lines that are already long?
set formatoptions+=1                  " Break before 1-letter words
" Vim 7.4 only: no // comment when joining commented lines
if v:version >= 704 | set formatoptions+=j | endif

set nrformats-=octal                  " never use octal when <C-x> or <C-a>

" ----------------------------------------------------------------------------
" Completion -- see also plugins/completion.vim
" ----------------------------------------------------------------------------

" Don't consider = symbol as part filename. Helps for deoplete file source, too.
set isfname-==

set complete-=i                       " don't complete includes
set complete-=t                       " don't complete tags
set completeopt-=preview              " don't open scratch preview
set completeopt+=menu,menuone         " show PUM, even for one thing

" @see <https://github.com/Valloric/YouCompleteMe/blob/master/autoload/youcompleteme.vim#L343>
if has('patch-7.4.314')
  set shortmess+=c                    " Disable "Pattern not found" messages
endif

" ============================================================================
" Multi-file projects
" This has to run super early
" ============================================================================

augroup jmsproject
  autocmd!

  autocmd BufNewFile,BufRead,BufWritePost
        \ *
        \ call jmsproject#GetRoot()
augroup END

let g:jms_has_completion = 0

" ============================================================================
" Plugins
" ============================================================================

" ----------------------------------------------------------------------------
" Plugins: netrw
" ----------------------------------------------------------------------------

" netrw in details format when no vimfiler
let g:netrw_liststyle      = 3
let g:netrw_home           = expand(g:jms#vim_dir . '/.tmp/cache')
let g:netrw_browsex_viewer = has('mac') ? 'open' : 'xdg-open'

" ----------------------------------------------------------------------------
" Plugins: load - called when vim-plug available
" ----------------------------------------------------------------------------

function! PlugIf(cond, ...)
  let opts = get(a:000, 0, {})
  return a:cond ? opts : extend(opts, { 'on': [], 'for': [] })
endfunction

function! s:LoadPlugins()
  " ============================================================================
  " Plug: Colorscheme
  " ============================================================================

  "Plug 'morhetz/gruvbox'
  Plug 'AlessandroYorba/Despacio'

  " ==========================================================================
  " Plug: File system, ctags
  " ==========================================================================

  Plug 'tpope/vim-vinegar'

  Plug 'christoomey/vim-system-copy'

  Plug 'ludovicchabant/vim-gutentags', PlugIf(executable('ctags'))
  Plug 'majutsushi/tagbar', PlugIf(executable('ctags'), { 'on': 'TagbarToggle' })
  nmap <F8> :TagbarToggle<CR>

  " ==========================================================================
  " Plug: Commands
  " ==========================================================================

  let g:fzf_dir = isdirectory('/usr/local/opt/fzf')
        \ ? '/usr/local/opt/fzf'
        \ : isdirectory(expand('~/.fzf'))
        \ ? '~/.fzf'
        \ : ''
  if !empty(g:fzf_dir)
    Plug g:fzf_dir
          \| Plug 'junegunn/fzf.vim'
  endif

  Plug 'tpope/vim-fugitive' | Plug 'junegunn/gv.vim'
  nnoremap <leader>gb :Gblame<CR>
  nnoremap <leader>gc :Gcommit<CR>
  nnoremap <leader>gd :Gdiff<CR>
  nnoremap <leader>gs :Gstatus<CR>
  nnoremap <leader>gw :Gwrite<CR>

  Plug 'edkolev/tmuxline.vim'
  let g:tmuxline_powerline_separators = 0

  Plug 'tpope/vim-eunuch'

  " ============================================================================
  " Plug: Quickfix
  " ============================================================================

  Plug 'romainl/vim-qf'
  Plug 'romainl/vim-qlist'

  " ============================================================================
  " Plug: Completion
  " ============================================================================

  Plug 'autozimu/LanguageClient-neovim', PlugIf(has('nvim'), { 'do': ':UpdateRemotePlugins' })

  Plug 'Shougo/neocomplete.vim', PlugIf(has('lua'))
  Plug 'Shougo/deoplete.nvim', PlugIf(has('nvim') && has('python3'), { 'do': ':UpdateRemotePlugins' })

  let g:jms_has_completion =
        \ exists("g:plugs['neocomplete.vim']")
        \ || exists("g:plugs['deoplete.nvim']")

  "Full syntax completion - super slow, like syntaxcomplete
  "Plug 'Shougo/neco-syntax', { 'for': ['scss'] }

  " Mixed-filetype completion for Shougo complete, e.g. highlight JS within
  " Markdown fenced code blocks.
  Plug 'Shougo/context_filetype.vim', PlugIf(g:jms_has_completion)

  " Include completion
  Plug 'Shougo/neoinclude.vim', PlugIf(g:jms_has_completion)

  Plug 'Shougo/neosnippet'
        \| Plug 'honza/vim-snippets'
        \| Plug 'Shougo/neosnippet-snippets'
        \| Plug 'bentayloruk/vim-react-es6-snippets'

  Plug 'zchee/deoplete-jedi', PlugIf(g:jms_has_completion && has('python3'))

  " ========================================================================
  " Plug: Input, syntax, spacing
  " ========================================================================

  " Plug 'neomake/neomake'
  Plug 'w0rp/ale'
  Plug 'sbdchd/neoformat'
  Plug 'ntpeters/vim-better-whitespace'
  Plug 'sgur/vim-editorconfig'


  " ========================================================================
  " Plug: Documentation
  " ========================================================================

  Plug 'rizzatti/dash.vim', PlugIf(has('macunix'))
  Plug 'KabbAmine/zeavim.vim'

  " ========================================================================
  " Plug: Editing keys
  " ========================================================================

  Plug 'tpope/vim-repeat'
  Plug 'tpope/vim-unimpaired'
  Plug 'tpope/vim-commentary'
  Plug 'tpope/vim-surround'

  Plug 'justinmk/vim-sneak'

  Plug 'christoomey/vim-sort-motion'

  " Sorted by what the textobj provides
  " Tip Use :omap ie to see what the operator-pending is mapped to
  " d/D for underscore section (e.g. `did` on foo_b|ar_baz -> foo__baz)
  " i for indent level
  " l for current line
  " u for url
  " b for any block type (parens, braces, quotes, ltgt)
  " = and i= for conflicts marked blocks
  " x for xml attr like `data-content="everything"`
  " c for css/sass/less block
  " f for function (c, java, js, php, vim only)
  Plug 'kana/vim-textobj-user'
        \| Plug 'machakann/vim-textobj-delimited'
        \| Plug 'kana/vim-textobj-indent'
        \| Plug 'kana/vim-textobj-line'
        \| Plug 'mattn/vim-textobj-url'
        \| Plug 'rhysd/vim-textobj-anyblock'
        \| Plug 'rhysd/vim-textobj-conflict'
        \| Plug 'whatyouhide/vim-textobj-xmlattr'
        \| Plug 'glts/vim-textobj-comment', { 'for': [ 'javascript' ] }
        \| Plug 'jasonlong/vim-textobj-css',
        \   { 'for': [ 'css', 'sass', 'scss' ] }
        \| Plug 'kana/vim-textobj-function'
                \| Plug 'thinca/vim-textobj-function-javascript',
                \   { 'for': [ 'javascript' ] }

  " ========================================================================
  " Plug: File system
  " ========================================================================

  " ========================================================================
  " Language: Git
  " ========================================================================

  " creates gitconfig, gitcommit, rebase
  " provides :DiffGitCached in gitcommit file type
  " vim 7.4-77 ships with 2013 version, this is newer
  Plug 'tpope/vim-git'

  " show diff in own split when editing a COMMIT_EDITMSG
  Plug 'rhysd/committia.vim'

  " ========================================================================
  " Language: JavaScript and derivatives, JSON
  " ========================================================================

  Plug 'pangloss/vim-javascript', { 'for': 'javascript' }
  let g:javascript_plugin_flow = 1
  " Plug 'othree/yajs.vim' | Plug 'othree/es.next.syntax.vim'
  Plug 'othree/javascript-libraries-syntax.vim'
  let g:used_javascript_libs = 'underscore,react,chai'
  Plug 'mxw/vim-jsx'
  let g:jsx_ext_required = 0
  Plug 'heavenshell/vim-jsdoc'
  Plug 'moll/vim-node'
  Plug 'othree/jspc.vim'
  Plug 'justinj/vim-react-snippets', { 'for': 'javascript' }

  " Completion
  Plug 'marijnh/tern_for_vim', PlugIf(g:jms_has_completion && executable('npm'), {'do': 'npm install --global tern'})

  Plug 'carlitux/deoplete-ternjs', PlugIf(g:jms_has_completion && has('nvim'), { 'do': 'npm install --global tern' })

  " Syntax completion
  Plug '1995eaton/vim-better-javascript-completion', PlugIf(g:jms_has_completion)

  " ==========================================================================
  " Language: Markdown, Pandoc
  " ==========================================================================

  " Override vim included markdown ft* and syntax
  " The git repo has a newer syntax file than the one that ships with vim
  "Plug 'tpope/vim-markdown'

  " Enable pandoc filetype options and vim operators/fns
  Plug 'vim-pandoc/vim-pandoc'

  " Use pandoc for markdown syntax
  Plug 'vim-pandoc/vim-pandoc-syntax'

  " ========================================================================
  " Language: Python
  " ========================================================================

  Plug 'heavenshell/vim-pydocstring'
  Plug 'raimon49/requirements.txt.vim', {'for': 'requirements'}

  " ========================================================================
  " Language: Stylesheets
  " ========================================================================

  Plug 'JulesWang/css.vim'
    \| Plug 'hail2u/vim-css3-syntax'
    \| Plug 'cakebaker/scss-syntax.vim', { 'for': ['scss'] }

  " Hex highlighting
  Plug 'ap/vim-css-color'

  " Completion
  Plug 'othree/csscomplete.vim'
  " }}}

  " ========================================================================
  " Language: VimL
  " ========================================================================

  Plug 'machakann/vim-vimhelplint'

  " gf to go to where autoloaded function is defined
  Plug 'kana/vim-gf-user', { 'for': ['vim'] }
        \| Plug 'sgur/vim-gf-autoload', { 'for': ['vim'] }

  " Auto-prefix continuation lines with \
  Plug 'lambdalisue/vim-backslash'

  " Completion
  Plug 'Shougo/neco-vim', PlugIf(g:jms_has_completion, { 'for': ['vim'] })

  " ========================================================================
  " Language: Misc
  " ========================================================================

  Plug 'PotatoesMaster/i3-vim-syntax'

endfunction

" ----------------------------------------------------------------------------
" Plugins: autoinstall vim-plug, define plugins, install plugins if needed
" ----------------------------------------------------------------------------

let s:use_plugins = 1
let g:plug_window = 'tabnew'

if s:use_plugins
  let s:has_plug = !empty(glob(expand(g:jms#vim_dir . '/autoload/plug.vim')))
  " Load vim-plug and its plugins?
  if !s:has_plug
    if executable('curl')
      execute 'silent !curl -fLo '
            \ . g:jms#vim_dir . '/autoload/plug.vim '
            \ . 'https://raw.githubusercontent.com/'
            \ . 'junegunn/vim-plug/master/plug.vim'
      let s:has_plug = 1
    endif
  endif

  if s:has_plug
    call plug#begin(g:jms#plug_absdir)
      call s:LoadPlugins()
      if !isdirectory(expand(g:jms#plug_absdir)) | PlugInstall
      endif
    call plug#end()
  endif
endif

" vim:fdm=marker
