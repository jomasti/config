" General settings {{{
set autoread
set number
set autoindent
set nocindent
set cmdheight=1
set ignorecase
set smartcase
set incsearch
set noshowmode
set ruler
set pastetoggle=<F3>
set backspace=indent,eol,start
set mouse=a
set cursorline
set laststatus=2
let mapleader = "\<Space>"
set backupcopy=yes
" }}}

" Backup settings {{{
set backup
set undofile
set noswapfile
set backupskip=/tmp/*,/private/tmp/*
set writebackup
if !has('nvim')
  execute 'set backupdir=' . g:jms#vim_dir . '/.tmp/backup//'
endif
if !has('nvim')
  execute 'set undodir=' . g:jms#vim_dir . '/.tmp/undo//'
endif
" }}}

" Tab settings {{{
set expandtab
set shiftwidth=2
set softtabstop=2
" }}}

" Split settings {{{
" split traversal
nnoremap <C-J> <C-W><C-J>
nnoremap <C-K> <C-W><C-K>
nnoremap <C-L> <C-W><C-L>
nnoremap <C-H> <C-W><C-H>

" split defaults
set splitbelow
set splitright
" }}}

" Clipboard settings {{{
vmap <Leader>y "+y
vmap <Leader>d "+d
nmap <Leader>p "+p
nmap <Leader>P "+P
vmap <Leader>p "+p
vmap <Leader>P "+P
" }}}

" ----------------------------------------------------------------------------
" Wild and file globbing stuff in command mode
" ----------------------------------------------------------------------------

set browsedir=buffer                  " browse files in same dir as open file
set wildmenu                          " Enhanced command line completion.
set wildmode=list:longest,full        " Complete files using a menu AND list
set wildignorecase
" output, VCS
set wildignore+=.git,.hg,.svn
set wildignore+=*/vendor/gems/*,*/vendor/cache/*,*/.bundle/*,*/.sass-cache/*,*.gem
set wildignore+=*.aux,*.out,*.toc
set wildignore+=*.o,*.obj,*.exe,*.dll,*.manifest,*.rbc,*.class
set wildignore+=*.ai,*.bmp,*.gif,*.ico,*.jpg,*.jpeg,*.png,*.psd,*.webp
set wildignore+=*.avi,*.m4a,*.mp3,*.oga,*.ogg,*.wav,*.webm
set wildignore+=*.eot,*.otf,*.ttf,*.woff
set wildignore+=*.doc,*.pdf
set wildignore+=*.zip,*.tar.gz,*.tar.bz2,*.rar,*.tar.xz
set wildignore+=*.swp,.lock,.DS_Store,._*

" ============================================================================
" Multi-file projects
" This has to run super early
" ============================================================================

augroup jmsproject
  autocmd!

  autocmd BufNewFile,BufRead,BufWritePost
        \ *
        \ call jmsproject#GetRoot()
augroup END

let g:jms_has_completion = 0

" ============================================================================
" Plugins
" ============================================================================

function! s:LoadPlugins()
  " ============================================================================
  " Plug: Colorscheme
  " ============================================================================

  Plug 'morhetz/gruvbox'

  " ============================================================================
  " Plug: Completion
  " ============================================================================

  if has('lua')
    Plug 'Shougo/neocomplete.vim'
  elseif has('nvim') && has('python3')
    Plug 'Shougo/deoplete.nvim', { 'do': ':UpdateRemotePlugins' }
  endif

  let g:jms_has_completion =
        \ exists("g:plugs['neocomplete.vim']")
        \ || exists("g:plugs['deoplete.nvim']")

  if g:jms_has_completion
    "Full syntax completion - super slow, like syntaxcomplete
    "Plug 'Shougo/neco-syntax', { 'for': ['scss'] }

    " Mixed-filetype completion for Shougo complete, e.g. highlight JS within
    " Markdown fenced code blocks.
    Plug 'Shougo/context_filetype.vim'

    " Include completion
    Plug 'Shougo/neoinclude.vim'

    Plug 'Shougo/neosnippet'
          \| Plug 'honza/vim-snippets'
          \| Plug 'Shougo/neosnippet-snippets'

    if has('python3')
      Plug 'zchee/deoplete-jedi'
    endif
  endif

  " ========================================================================
  " Plug: Input, syntax, spacing
  " ========================================================================

  Plug 'neomake/neomake'
  Plug 'Chiel92/vim-autoformat'
  Plug 'ntpeters/vim-better-whitespace'
  Plug 'editorconfig/editorconfig-vim'

  " ========================================================================
  " Plug: Editing keys
  " ========================================================================

  " Sorted by what the textobj provides
  " Tip Use :omap ie to see what the operator-pending is mapped to
  " d/D for underscore section (e.g. `did` on foo_b|ar_baz -> foo__baz)
  " r for right hand of assignment (`baz` in `foo = baz`)
  " k/v for JSON style key/value
  " e for entire file
  " i for indent level
  " l for current line
  " u for url
  " b for any block type (parens, braces, quotes, ltgt)
  " = and i= for conflicts marked blocks
  " x for xml attr like `data-content="everything"`
  " c for css/sass/less block
  " f for function (c, java, js, php, vim only)
  Plug 'kana/vim-textobj-user'
        \| Plug 'machakann/vim-textobj-delimited'
        \| Plug 'Julian/vim-textobj-assignment',
        \   has('python') ? {} : { 'on': [] }
        \| Plug 'vimtaku/vim-textobj-keyvalue'
        \| Plug 'kana/vim-textobj-entire'
        \| Plug 'kana/vim-textobj-indent'
        \| Plug 'kana/vim-textobj-line'
        \| Plug 'mattn/vim-textobj-url'
        \| Plug 'rhysd/vim-textobj-anyblock'
        \| Plug 'rhysd/vim-textobj-conflict'
        \| Plug 'whatyouhide/vim-textobj-xmlattr'
        \| Plug 'glts/vim-textobj-comment', { 'for': [ 'javascript' ] }
        \| Plug 'jasonlong/vim-textobj-css',
        \   { 'for': [ 'css', 'sass', 'scss' ] }
        \| Plug 'kana/vim-textobj-function'
                \| Plug 'thinca/vim-textobj-function-javascript',
                \   { 'for': [ 'javascript' ] }

  " ========================================================================
  " Plug: File system
  " ========================================================================

  " ========================================================================
  " Language: Git
  " ========================================================================

  " creates gitconfig, gitcommit, rebase
  " provides :DiffGitCached in gitcommit file type
  " vim 7.4-77 ships with 2013 version, this is newer
  Plug 'tpope/vim-git'

  " show diff in own split when editing a COMMIT_EDITMSG
  Plug 'rhysd/committia.vim'

  " ========================================================================
  " Language: JavaScript and derivatives, JSON
  " ========================================================================

  Plug 'pangloss/vim-javascript', { 'for': 'javascript' }
  " Plug 'othree/yajs.vim' | Plug 'othree/es.next.syntax.vim'
  Plug 'othree/javascript-libraries-syntax.vim'
  let g:used_javascript_libs = 'underscore,react,chai'
  Plug 'mxw/vim-jsx'
  let g:jsx_ext_required = 0
  Plug 'heavenshell/vim-jsdoc'
  Plug 'moll/vim-node'
  Plug 'othree/jspc.vim'

  " Completion
  if g:jms_has_completion
    if executable('npm')
      Plug 'marijnh/tern_for_vim', {'do': 'npm install --global tern'}

      if has('nvim')
        Plug 'carlitux/deoplete-ternjs', { 'do': 'npm install --global tern' }
      endif
    else
      " Syntax completion
      Plug '1995eaton/vim-better-javascript-completion'
    endif
  endif
  "}}}
  "
  " ========================================================================
  " Language: Python
  " ========================================================================

  Plug 'heavenshell/vim-pydocstring'

  " ========================================================================
  " Language: Stylesheets
  " ========================================================================

  Plug 'JulesWang/css.vim'
    \| Plug 'hail2u/vim-css3-syntax'
    \| Plug 'cakebaker/scss-syntax.vim', { 'for': ['scss'] }

  " Hex highlighting
  Plug 'ap/vim-css-color'

  " Completion
  Plug 'othree/csscomplete.vim'
  " }}}

  " ========================================================================
  " Language: VimL
  " ========================================================================

  Plug 'machakann/vim-vimhelplint'

  " gf to go to where autoloaded function is defined
  Plug 'kana/vim-gf-user', { 'for': ['vim'] }
        \| Plug 'sgur/vim-gf-autoload', { 'for': ['vim'] }

  " Auto-prefix continuation lines with \
  Plug 'lambdalisue/vim-backslash'

  " Completion
  if g:jms_has_completion | Plug 'Shougo/neco-vim', { 'for': ['vim'] }
  endif

  " ========================================================================
  " Language: Misc
  " ========================================================================

  Plug 'PotatoesMaster/i3-vim-syntax'

  " Movement/Text manipulation {{{
  Plug 'justinmk/vim-sneak'
  Plug 'christoomey/vim-sort-motion'
  Plug 'tpope/vim-commentary'
  Plug 'tpope/vim-surround'
  Plug 'tpope/vim-repeat'
  Plug 'tpope/vim-unimpaired'
  " }}}

  " Alignment/formatting {{{
  " }}}

  " Snippets {{{
  Plug 'justinj/vim-react-snippets', { 'for': 'javascript' }
  " }}}

  " File finding/navigation {{{
  Plug 'ctrlpvim/ctrlp.vim'
  " ctrlp
  nnoremap <leader>e :CtrlP<cr>
  nnoremap <leader>E :CtrlPCurFile<cr>
  nnoremap <leader>t :CtrlPBufTag<cr>
  nnoremap <leader>T :CtrlPTag<cr>
  nnoremap <leader>a :CtrlPBuffer<cr>
  nnoremap <leader>A :CtrlPMRUFiles<cr>

  let g:ctrlp_custom_ignore = {
        \ 'dir': '\.git$\|node_modules/',
        \ }
  let g:ctrlp_use_caching = 1
  let g:ctrlp_clear_cache_on_exit = 0
  let g:ctrlp_cache_dir = $HOME.'/.cache/ctrlp'
  let g:ctrlp_show_hidden = 1
  let g:ctlp_working_path_mode = 'ra'
  let g:ctrlp_prompt_mappings = {
        \ 'PrtClearCache()': ['<F5>', '<c-i>'],
        \ }
  let g:ctrlp_reuse_window = 'startify'

  Plug 'FelikZ/ctrlp-py-matcher'
  let g:ctrlp_match_func = { 'match': 'pymatcher#PyMatch' }

  Plug 'tpope/vim-vinegar'
  Plug 'mhinz/vim-grepper'
  nnoremap <leader>git :Grepper -tool git -noswitch<cr>
  nnoremap <leader>ag :Grepper -tool ag -grepprg ag --vimgrep<cr>

  Plug 'jlanzarotta/bufexplorer'
  Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' }
  Plug 'junegunn/fzf.vim'
  let g:fzf_nvim_statusline=0

  nnoremap <silent> <leader><space> :Files<CR>
  nnoremap <silent> <leader>a :Buffers<CR>
  nnoremap <silent> <leader>A :Windows<CR>
  nnoremap <silent> <leader>; :BLines<CR>
  nnoremap <silent> <leader>. :Lines<CR>
  nnoremap <silent> <leader>o :BTags<CR>
  nnoremap <silent> <leader>O :Tags<CR>
  nnoremap <silent> <leader>? :History<CR>
  nnoremap <silent> <leader>/ :execute 'Ag ' . input('Ag/')<CR>
  nnoremap <silent> K :call SearchWordWithAg()<CR>
  vnoremap <silent> K :call SearchVisualSelectionWithAg()<CR>
  nnoremap <silent> <leader>gl :Commits<CR>
  nnoremap <silent> <leader>ga :BCommits<CR>

  imap <C-x><C-f> <plug>(fzf-complete-file-ag)
  imap <C-x><C-l> <plug>(fzf-complete-line)

  function! SearchWordWithAg()
    execute 'Ag' expand('<cword>')
  endfunction

  function! SearchVisualSelectionWithAg() range
    let old_reg = getreg('"')
    let old_regtype = getregtype('"')
    let old_clipboard = &clipboard
    set clipboard&
    normal! ""gvy
    let selection = getreg('"')
    call setreg('"', old_reg, old_regtype)
    let &clipboard = old_clipboard
    execute 'Ag' selection
  endfunction
  " }}}

  " External integration {{{
  Plug 'christoomey/vim-system-copy'
  Plug 'ludovicchabant/vim-gutentags'
  " }}}

  " Git {{{
  Plug 'tpope/vim-fugitive' | Plug 'junegunn/gv.vim'
  nnoremap <leader>gb :Gblame<CR>
  nnoremap <leader>gc :Gcommit<CR>
  nnoremap <leader>gd :Gdiff<CR>
  nnoremap <leader>gs :Gstatus<CR>
  nnoremap <leader>gw :Gwrite<CR>

  Plug 'airblade/vim-gitgutter'
  " }}}

  " Status line {{{
  Plug 'itchyny/lightline.vim'
  Plug 'edkolev/tmuxline.vim'
  " }}}

  " Session Management {{{
  Plug 'mhinz/vim-startify'
  " }}}
endfunction

" ----------------------------------------------------------------------------
" Plugins: autoinstall vim-plug, define plugins, install plugins if needed
" ----------------------------------------------------------------------------

let s:use_plugins = 1
let s:plug_dir = '/vendor/'
let s:plug_dir .= has('nvim') ? 'nvim' : 'vim'
let s:jms_plug_absdir = g:jms#vim_dir . s:plug_dir

if s:use_plugins
  " Load vim-plug and its plugins?
  if empty(glob(expand(g:jms#vim_dir . '/autoload/plug.vim')))
    execute 'silent !curl -fLo '
          \ . g:jms#vim_dir . '/autoload/plug.vim '
          \ . 'https://raw.githubusercontent.com/'
          \ . 'junegunn/vim-plug/master/plug.vim'
  endif

  call plug#begin(s:jms_plug_absdir)
    call s:LoadPlugins()
    if !isdirectory(expand(s:jms_plug_absdir)) | PlugInstall
    endif
  call plug#end()
endif

" vim:fdm=marker
